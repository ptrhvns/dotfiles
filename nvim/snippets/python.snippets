snippet #f
	# FIXME${1}
snippet #t
	# TODO${1}
snippet #x
	# XXX${1}
snippet asf
	assert False # FIXME
snippet bre
	breakpoint() # FIXME
snippet cas
	case ${1:pattern}:
	    ${2:pass}
snippet cla
	class ${1:Name}:
	    ${2:pass}
snippet def
	def ${1:name}(${2}):
	    ${3:pass}
snippet ded
	def __${1:name}__(self${2}):
	    ${3:pass}
snippet dem
	def ${1:name}(self${2}):
	    ${3:pass}
snippet doc
	```
	Document behavior, important attributes, and subclass behavior. Omit type
	annotation information if used.
	```
snippet dof
	```
	Document every argument, returned value, raised exception, side effects, and
	other behaviors. Omit type annotation information if used.
	```
snippet dom
	```
	Introduce the contents of the module and any important classes, functions or
	variables the user should know about. Omit type annotation information if
	used.
	```
snippet eli
	elif ${1:condition}:
	    ${2:pass}
snippet els
	else:
	    ${1:pass}
snippet for
	for ${1:name} in ${2:iterable}:
	    ${3:pass}
snippet fro
	from ${1:module} import ${2:name}
snippet if
	if ${1:condition}:
	  ${2:pass}
snippet ifn
	if not ${1:condition}:
	  ${2:pass}
snippet imp
	import ${1:module}
snippet ipd
	import ipdb; ipdb.set_trace(context=10) # FIXME
snippet ipy
	import IPython; IPython.embed() # FIXME
snippet main
	def main(${1}):
	    ${2:pass}
	
	
	if __name__ == "__main__":
	    main(${3:$1})
snippet mat
	match ${1:subject}:
	  case ${2:pattern}:
	      ${3:pass}
snippet pts
	# fmt: off
	import pytest # isort: skip # noqa
	# fmt: on
	@pytest.mark.skip(reason="TODO") # noqa
snippet try
	try:
	    pass
	except: # FIXME
	    pass
snippet wit
	with ${1:expression}:
	    ${2:pass}
snippet wita
	with ${1:expression} as ${2:target}:
	    ${3:pass}
