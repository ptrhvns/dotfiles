snippet #f
	# FIXME
snippet #t
	# TODO
snippet def
	def ${1:name}(${2}):
	    ${3:pass # FIXME}
snippet dem
	def ${1:name}(self${2}):
	    ${3:pass # FIXME}
snippet ded
	def __${1:name}__(self${2}):
	    ${3:pass # FIXME}
snippet dec
	@classmethod
	def ${1:name}(cls${2}):
	    ${3:pass # FIXME}
snippet des
	@staticmethod
	def ${1:name}(${2}):
	    ${3:pass # FIXME}
snippet det
	@unittest.skip("${1:not implemented yet}")
	def test_${2:name}(self):
	    ${3:pass # FIXME}
snippet adef
	async def ${1:name}(${2}):
	    ${3:pass # FIXME}
snippet adem
	async def ${1:name}(self${2}):
	    ${3:pass # FIXME}
snippet cla
	class ${1:Name}:
	    ${2:pass # FIXME}
snippet imp
	import ${1:module}
snippet fro
	from ${1:module} import ${2:name}
snippet try
	try:
	    ${1:pass # FIXME}
	except ${2:Exception}:
	    ${3:pass # FIXME}
snippet exc
	except ${1:Exception} as exc:
	    ${2:pass # FIXME}
snippet fin
	finally:
	    ${1:pass # FIXME}
snippet ifm
	if __name__ == "__main__":
	    ${1:pass # FIXME}
snippet if
	if ${1:expression}:
	    ${2:pass # FIXME}
snippet ifn
	if not ${1:expression}:
	    ${2:pass # FIXME}
snippet eli
	elif ${1:expression}:
	    ${2:pass # FIXME}
snippet elin
	elif not ${1:expression}:
	    ${2:pass # FIXME}
snippet els
	else:
	    ${1:pass # FIXME}
snippet for
	for ${1:target} in ${2:expression}:
	    ${3:pass # FIXME}
snippet afor
	async for ${1:target} in ${2:expression}:
	    ${3:pass # FIXME}
snippet whi
	while ${1:expression}:
	    ${2:pass # FIXME}
snippet wit
	with ${1:expression}:
	    ${2:pass # FIXME}
snippet awit
	async with ${1:expression}:
	    ${2:pass # FIXME}
snippet lam
	lambda ${1:parameters}: ${2:expression}
snippet doc
	"""${1:text}"""
snippet ass
	assert ${1:expression}
snippet asf
	assert False # FIXME
snippet pmf
	import pytest  # FIXME remove
	@pytest.mark.focus  # FIXME remove
snippet pms
	@pytest.mark.skip
snippet dto
	from django.test import tag # FIXME remove
	@tag("only") # FIXME remove
snippet ipd
	import ipdb # FIXME remove
	ipdb.set_trace(context=15) # FIXME remove
snippet bre
	breakpoint()
snippet model_style
	# constants (including choices)
	
	# database fields
	
	# custom manager ("table-level")
	
	# class Meta:
	#     pass # FIXME
	
	def __str__(self):
	    pass  # FIXME implement
	
	# other special model methods
	
	# def clean(self):
	#     pass # FIXME
	
	# def save(self):
	#     pass # FIXME
	
	# def get_absolute_url(self):
	#     pass # FIXME
	
	# model methods ("row-level")
snippet rai
	raise ${1:expression}
snippet pd
	print(f"DEBUG: ${1}") # FIXME
